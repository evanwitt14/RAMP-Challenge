{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\egwha\\\\Desktop\\\\ramp-fe-challenge\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    loading: employeesLoading,\n    fetchAll: fetchEmployees\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [hasMoreData, setHasMoreData] = useState(true);\n  const transactions = useMemo(() => {\n    var _paginatedTransaction;\n\n    if (selectedEmployee) {\n      return transactionsByEmployee;\n    }\n\n    return (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : [];\n  }, [paginatedTransactions, transactionsByEmployee, selectedEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    await fetchEmployees();\n    await fetchPaginatedTransactions();\n    setIsLoading(false);\n  }, [fetchEmployees, fetchPaginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    var _employees$find;\n\n    setIsLoading(true);\n    setSelectedEmployee((_employees$find = employees === null || employees === void 0 ? void 0 : employees.find(emp => emp.id === employeeId)) !== null && _employees$find !== void 0 ? _employees$find : null);\n    await fetchTransactionsByEmployee(employeeId);\n    setIsLoading(false);\n  }, [fetchTransactionsByEmployee, employees]);\n  const loadMoreTransactions = useCallback(async () => {\n    setIsLoading(true);\n\n    if (selectedEmployee === null) {\n      await fetchPaginatedTransactions();\n    } else {\n      // Ensure to handle pagination correctly based on selected employee\n      await fetchTransactionsByEmployee(selectedEmployee.id);\n    }\n\n    setIsLoading(false);\n  }, [fetchPaginatedTransactions, fetchTransactionsByEmployee, selectedEmployee]);\n  const resetFilter = useCallback(async () => {\n    setSelectedEmployee(null);\n    await loadAllTransactions();\n  }, [loadAllTransactions]);\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions();\n    }\n  }, [employeesLoading, employees, loadAllTransactions]);\n  useEffect(() => {\n    // Determine if there is more data to fetch\n    if ((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) === null) {\n      setHasMoreData(false);\n    }\n  }, [paginatedTransactions]);\n  const showViewMoreButton = useMemo(() => {\n    return (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && selectedEmployee === null && hasMoreData;\n  }, [paginatedTransactions, selectedEmployee, hasMoreData]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: employeesLoading || isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue.id === EMPTY_EMPLOYEE.id) {\n            await resetFilter(); // Reset to show all transactions\n          } else {\n            await loadTransactionsByEmployee(newValue.id); // Filter by selected employee\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), showViewMoreButton && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: isLoading,\n          onClick: async () => {\n            await loadMoreTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"MAoSu5ZOZPocipzMgPN8o+4X2eY=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","loading","employeesLoading","fetchAll","fetchEmployees","paginatedTransactions","fetchPaginatedTransactions","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","isLoading","setIsLoading","selectedEmployee","setSelectedEmployee","hasMoreData","setHasMoreData","transactions","loadAllTransactions","loadTransactionsByEmployee","employeeId","find","emp","id","loadMoreTransactions","resetFilter","nextPage","showViewMoreButton","item","value","label","firstName","lastName","newValue"],"sources":["C:/Users/egwha/Desktop/ramp-fe-challenge/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, loading: employeesLoading, fetchAll: fetchEmployees } = useEmployees();\n  const { data: paginatedTransactions, fetchAll: fetchPaginatedTransactions } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, fetchById: fetchTransactionsByEmployee } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\n  const [hasMoreData, setHasMoreData] = useState(true);\n\n  const transactions = useMemo(() => {\n    if (selectedEmployee) {\n      return transactionsByEmployee;\n    }\n    return paginatedTransactions?.data ?? [];\n  }, [paginatedTransactions, transactionsByEmployee, selectedEmployee]);\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    await fetchEmployees();\n    await fetchPaginatedTransactions();\n    setIsLoading(false);\n  }, [fetchEmployees, fetchPaginatedTransactions]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setIsLoading(true);\n      setSelectedEmployee(employees?.find((emp) => emp.id === employeeId) ?? null);\n      await fetchTransactionsByEmployee(employeeId);\n      setIsLoading(false);\n    },\n    [fetchTransactionsByEmployee, employees]\n  );\n\n  const loadMoreTransactions = useCallback(async () => {\n    setIsLoading(true);\n    if (selectedEmployee === null) {\n      await fetchPaginatedTransactions();\n    } else {\n      // Ensure to handle pagination correctly based on selected employee\n      await fetchTransactionsByEmployee(selectedEmployee.id);\n    }\n    setIsLoading(false);\n  }, [fetchPaginatedTransactions, fetchTransactionsByEmployee, selectedEmployee]);\n\n  const resetFilter = useCallback(async () => {\n    setSelectedEmployee(null);\n    await loadAllTransactions();\n  }, [loadAllTransactions]);\n\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions();\n    }\n  }, [employeesLoading, employees, loadAllTransactions]);\n\n  useEffect(() => {\n    // Determine if there is more data to fetch\n    if (paginatedTransactions?.nextPage === null) {\n      setHasMoreData(false);\n    }\n  }, [paginatedTransactions]);\n\n  const showViewMoreButton = useMemo(() => {\n    return paginatedTransactions?.data !== null && selectedEmployee === null && hasMoreData;\n  }, [paginatedTransactions, selectedEmployee, hasMoreData]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={employeesLoading || isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return;\n            }\n\n            if (newValue.id === EMPTY_EMPLOYEE.id) {\n              await resetFilter(); // Reset to show all transactions\n            } else {\n              await loadTransactionsByEmployee(newValue.id); // Filter by selected employee\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {showViewMoreButton && (\n            <button\n              className=\"RampButton\"\n              disabled={isLoading}\n              onClick={async () => {\n                await loadMoreTransactions();\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}