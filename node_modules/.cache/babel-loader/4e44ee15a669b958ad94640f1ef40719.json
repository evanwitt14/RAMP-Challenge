{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const fetchById = useCallback(async employeeId => {\n    if (!employeeId) {\n      console.error(\"Employee id cannot be empty\");\n      return;\n    }\n\n    const data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n    setTransactionsByEmployee(data);\n  }, [fetchWithCache]);\n  const fetchAll = useCallback(async () => {\n    const data = await fetchWithCache(\"transactionsForAllEmployees\");\n    setTransactionsByEmployee(data);\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(useTransactionsByEmployee, \"bf/dGnhAfgMZN3uHiHnh0kcV8cY=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","fetchById","employeeId","console","error","data","fetchAll","invalidateData"],"sources":["C:/Users/egwha/Desktop/ramp-fe-challenge/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\";\nimport { TransactionsByEmployeeResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null);\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      if (!employeeId) {\n        console.error(\"Employee id cannot be empty\");\n        return;\n      }\n\n      const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n        \"transactionsByEmployee\",\n        {\n          employeeId,\n        }\n      );\n\n      setTransactionsByEmployee(data);\n    },\n    [fetchWithCache]\n  );\n\n  const fetchAll = useCallback(\n    async () => {\n      const data = await fetchWithCache<Transaction[]>(\"transactionsForAllEmployees\");\n      setTransactionsByEmployee(data);\n    },\n    [fetchWithCache]\n  );\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n\n  return { data: transactionsByEmployee, loading, fetchById, fetchAll, invalidateData };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE;EAEA,MAAMO,SAAS,GAAGR,WAAW,CAC3B,MAAOS,UAAP,IAA8B;IAC5B,IAAI,CAACA,UAAL,EAAiB;MACfC,OAAO,CAACC,KAAR,CAAc,6BAAd;MACA;IACD;;IAED,MAAMC,IAAI,GAAG,MAAMR,cAAc,CAC/B,wBAD+B,EAE/B;MACEK;IADF,CAF+B,CAAjC;IAOAF,yBAAyB,CAACK,IAAD,CAAzB;EACD,CAf0B,EAgB3B,CAACR,cAAD,CAhB2B,CAA7B;EAmBA,MAAMS,QAAQ,GAAGb,WAAW,CAC1B,YAAY;IACV,MAAMY,IAAI,GAAG,MAAMR,cAAc,CAAgB,6BAAhB,CAAjC;IACAG,yBAAyB,CAACK,IAAD,CAAzB;EACD,CAJyB,EAK1B,CAACR,cAAD,CAL0B,CAA5B;EAQA,MAAMU,cAAc,GAAGd,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEK,IAAI,EAAEN,sBAAR;IAAgCD,OAAhC;IAAyCG,SAAzC;IAAoDK,QAApD;IAA8DC;EAA9D,CAAP;AACD;;GApCeX,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}