{"ast":null,"code":"import { getEmployees, getTransactionsPaginated, getTransactionsByEmployee, getAllTransactions, // Add this import\nsetTransactionApproval } from \"./requests\";\nconst timeout = getTimeout();\nconst mockTimeout = 1 * timeout;\nexport function fakeFetch(endpoint, params) {\n  return new Promise((resolve, reject) => {\n    mockApiLogger({\n      message: \"Loading request\",\n      data: {\n        endpoint,\n        params\n      },\n      type: \"info\"\n    });\n    let result;\n\n    try {\n      switch (endpoint) {\n        case \"employees\":\n          result = getEmployees();\n          setTimeout(() => {\n            mockApiLogger({\n              data: {\n                endpoint,\n                params,\n                result\n              }\n            });\n            resolve(result);\n          }, mockTimeout);\n          break;\n\n        case \"paginatedTransactions\":\n          result = getTransactionsPaginated(params);\n          setTimeout(() => {\n            mockApiLogger({\n              data: {\n                endpoint,\n                params,\n                result\n              }\n            });\n            resolve(result);\n          }, mockTimeout * 2.5);\n          break;\n\n        case \"transactionsByEmployee\":\n          result = getTransactionsByEmployee(params);\n          setTimeout(() => {\n            mockApiLogger({\n              data: {\n                endpoint,\n                params,\n                result\n              }\n            });\n            resolve(result);\n          }, mockTimeout * 1.5);\n          break;\n\n        case \"transactionsForAllEmployees\":\n          // Add this case\n          result = getAllTransactions();\n          setTimeout(() => {\n            mockApiLogger({\n              data: {\n                endpoint,\n                params,\n                result\n              }\n            });\n            resolve(result);\n          }, mockTimeout * 1);\n          break;\n\n        case \"setTransactionApproval\":\n          result = setTransactionApproval(params);\n          setTimeout(() => {\n            mockApiLogger({\n              data: {\n                endpoint,\n                params,\n                result\n              }\n            });\n            resolve(result);\n          }, mockTimeout * 1);\n          break;\n\n        default:\n          throw new Error(\"Invalid endpoint\");\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        mockApiLogger({\n          message: error.message,\n          data: {\n            endpoint,\n            params\n          },\n          type: \"error\"\n        });\n        reject(error.message);\n      }\n    }\n  });\n}","map":{"version":3,"names":["getEmployees","getTransactionsPaginated","getTransactionsByEmployee","getAllTransactions","setTransactionApproval","timeout","getTimeout","mockTimeout","fakeFetch","endpoint","params","Promise","resolve","reject","mockApiLogger","message","data","type","result","setTimeout","Error","error"],"sources":["C:/Users/egwha/Desktop/ramp-fe-challenge/ramp-fe-challenge/src/utils/fetch.ts"],"sourcesContent":["import {\n  getEmployees,\n  getTransactionsPaginated,\n  getTransactionsByEmployee,\n  getAllTransactions,  // Add this import\n  setTransactionApproval,\n} from \"./requests\";\nimport { PaginatedRequestParams, RequestByEmployeeParams, SetTransactionApprovalParams } from \"./types\";\n\nconst timeout = getTimeout();\nconst mockTimeout = 1 * timeout;\n\nexport function fakeFetch<TData, TParams extends object = object>(\n  endpoint: RegisteredEndpoints,\n  params?: TParams\n): Promise<TData> {\n  return new Promise((resolve, reject) => {\n    mockApiLogger({\n      message: \"Loading request\",\n      data: { endpoint, params },\n      type: \"info\",\n    });\n\n    let result: TData;\n\n    try {\n      switch (endpoint) {\n        case \"employees\":\n          result = getEmployees() as unknown as TData;\n\n          setTimeout(() => {\n            mockApiLogger({ data: { endpoint, params, result } });\n            resolve(result);\n          }, mockTimeout);\n          break;\n\n        case \"paginatedTransactions\":\n          result = getTransactionsPaginated(params as PaginatedRequestParams) as unknown as TData;\n\n          setTimeout(() => {\n            mockApiLogger({ data: { endpoint, params, result } });\n            resolve(result);\n          }, mockTimeout * 2.5);\n          break;\n\n        case \"transactionsByEmployee\":\n          result = getTransactionsByEmployee(params as RequestByEmployeeParams) as unknown as TData;\n\n          setTimeout(() => {\n            mockApiLogger({ data: { endpoint, params, result } });\n            resolve(result);\n          }, mockTimeout * 1.5);\n          break;\n\n        case \"transactionsForAllEmployees\":  // Add this case\n          result = getAllTransactions() as unknown as TData;\n\n          setTimeout(() => {\n            mockApiLogger({ data: { endpoint, params, result } });\n            resolve(result);\n          }, mockTimeout * 1);\n          break;\n\n        case \"setTransactionApproval\":\n          result = setTransactionApproval(params as SetTransactionApprovalParams) as unknown as TData;\n\n          setTimeout(() => {\n            mockApiLogger({ data: { endpoint, params, result } });\n            resolve(result);\n          }, mockTimeout * 1);\n          break;\n\n        default:\n          throw new Error(\"Invalid endpoint\");\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        mockApiLogger({\n          message: error.message,\n          data: { endpoint, params },\n          type: \"error\",\n        });\n        reject(error.message);\n      }\n    }\n  });\n}\n"],"mappings":"AAAA,SACEA,YADF,EAEEC,wBAFF,EAGEC,yBAHF,EAIEC,kBAJF,EAIuB;AACrBC,sBALF,QAMO,YANP;AASA,MAAMC,OAAO,GAAGC,UAAU,EAA1B;AACA,MAAMC,WAAW,GAAG,IAAIF,OAAxB;AAEA,OAAO,SAASG,SAAT,CACLC,QADK,EAELC,MAFK,EAGW;EAChB,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtCC,aAAa,CAAC;MACZC,OAAO,EAAE,iBADG;MAEZC,IAAI,EAAE;QAAEP,QAAF;QAAYC;MAAZ,CAFM;MAGZO,IAAI,EAAE;IAHM,CAAD,CAAb;IAMA,IAAIC,MAAJ;;IAEA,IAAI;MACF,QAAQT,QAAR;QACE,KAAK,WAAL;UACES,MAAM,GAAGlB,YAAY,EAArB;UAEAmB,UAAU,CAAC,MAAM;YACfL,aAAa,CAAC;cAAEE,IAAI,EAAE;gBAAEP,QAAF;gBAAYC,MAAZ;gBAAoBQ;cAApB;YAAR,CAAD,CAAb;YACAN,OAAO,CAACM,MAAD,CAAP;UACD,CAHS,EAGPX,WAHO,CAAV;UAIA;;QAEF,KAAK,uBAAL;UACEW,MAAM,GAAGjB,wBAAwB,CAACS,MAAD,CAAjC;UAEAS,UAAU,CAAC,MAAM;YACfL,aAAa,CAAC;cAAEE,IAAI,EAAE;gBAAEP,QAAF;gBAAYC,MAAZ;gBAAoBQ;cAApB;YAAR,CAAD,CAAb;YACAN,OAAO,CAACM,MAAD,CAAP;UACD,CAHS,EAGPX,WAAW,GAAG,GAHP,CAAV;UAIA;;QAEF,KAAK,wBAAL;UACEW,MAAM,GAAGhB,yBAAyB,CAACQ,MAAD,CAAlC;UAEAS,UAAU,CAAC,MAAM;YACfL,aAAa,CAAC;cAAEE,IAAI,EAAE;gBAAEP,QAAF;gBAAYC,MAAZ;gBAAoBQ;cAApB;YAAR,CAAD,CAAb;YACAN,OAAO,CAACM,MAAD,CAAP;UACD,CAHS,EAGPX,WAAW,GAAG,GAHP,CAAV;UAIA;;QAEF,KAAK,6BAAL;UAAqC;UACnCW,MAAM,GAAGf,kBAAkB,EAA3B;UAEAgB,UAAU,CAAC,MAAM;YACfL,aAAa,CAAC;cAAEE,IAAI,EAAE;gBAAEP,QAAF;gBAAYC,MAAZ;gBAAoBQ;cAApB;YAAR,CAAD,CAAb;YACAN,OAAO,CAACM,MAAD,CAAP;UACD,CAHS,EAGPX,WAAW,GAAG,CAHP,CAAV;UAIA;;QAEF,KAAK,wBAAL;UACEW,MAAM,GAAGd,sBAAsB,CAACM,MAAD,CAA/B;UAEAS,UAAU,CAAC,MAAM;YACfL,aAAa,CAAC;cAAEE,IAAI,EAAE;gBAAEP,QAAF;gBAAYC,MAAZ;gBAAoBQ;cAApB;YAAR,CAAD,CAAb;YACAN,OAAO,CAACM,MAAD,CAAP;UACD,CAHS,EAGPX,WAAW,GAAG,CAHP,CAAV;UAIA;;QAEF;UACE,MAAM,IAAIa,KAAJ,CAAU,kBAAV,CAAN;MA/CJ;IAiDD,CAlDD,CAkDE,OAAOC,KAAP,EAAc;MACd,IAAIA,KAAK,YAAYD,KAArB,EAA4B;QAC1BN,aAAa,CAAC;UACZC,OAAO,EAAEM,KAAK,CAACN,OADH;UAEZC,IAAI,EAAE;YAAEP,QAAF;YAAYC;UAAZ,CAFM;UAGZO,IAAI,EAAE;QAHM,CAAD,CAAb;QAKAJ,MAAM,CAACQ,KAAK,CAACN,OAAP,CAAN;MACD;IACF;EACF,CArEM,CAAP;AAsED"},"metadata":{},"sourceType":"module"}